@page "/post/{id}"

@using RedditAPP.Data;
@using RedditAPP.Shared.Models
@inject ApiService apiService
@inject NavigationManager NavigationManager

<PageTitle>Kreddit</PageTitle>

@if (Post == null)
{
    <div class="d-flex justify-content-center my-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="container my-5">
        <div class="card mb-4 shadow-sm post-holder">
            <div class="card-header">
                <h6 class="card-subtitle mb-2 text-muted">Posted by @Post.AuthorName</h6>
                <h6 class="text-muted">@Post.PostDate.ToString("dd/MM/yyyy")</h6>
            </div>
            <div class="card-body">
                <h4 class="card-title">@Post.Title</h4>
                <p class="card-text">@Post.Content</p>
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <button class="btn btn-sm btn-outline-primary ms-2">
                            <i class="bi bi-chat"></i> @(Post.Comments.Count) Comments
                        </button>
                        <button class="btn btn-sm btn-outline-success" @onclick="() => Upvote(Post.PostId)">
                            Upvote
                        </button>
                        <button class="btn btn-sm btn-outline-danger ms-2" @onclick="() => Downvote(Post.PostId)">
                            Downvote
                        </button>
                    </div>
                    <small class="text-muted">@(Post.Upvotes - Post.Downvotes) Votes</small>
                </div>
            </div>
        </div>

        <div class="comments-container">
            <h4>Comments</h4>
            @if (Post.Comments.Count > 0)
            {
                @foreach (var comment in Post.Comments)
                {
                    <div class="card mb-3 shadow-sm">
                        <div class="card-body">
                            <h6 class="card-subtitle mb-2 text-muted">Comment by @comment.AuthorName</h6>
                            <p class="card-text">@comment.Content</p>
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <button class="btn btn-sm btn-outline-success" @onclick="() => UpvoteComment(comment.CommentId)">
                                        <i class="bi bi-hand-thumbs-up"></i> Upvote
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger ms-2" @onclick="() => DownvoteComment(comment.CommentId)">
                                        <i class="bi bi-hand-thumbs-down"></i> Downvote
                                    </button>
                                </div>
                                <small class="text-muted">@(comment.Upvotes - comment.Downvotes) Votes</small>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <p>No comments yet. Be the first to comment!</p>
            }
        </div>

        <!-- Create Comment Component -->
        <CreateComment PostId=@PostId></CreateComment>
    </div>
}

@code {
    [Parameter]
    public string Id { get; set; }
    public int PostId { get { return int.Parse(Id); } }
    public Post Post { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Post = await apiService.GetPost(PostId);
    }

    private async void Upvote(long id)
    {
        Console.WriteLine("Not implemented 😪");
    }

    private async void Downvote(long id)
    {
        Console.WriteLine("Not implemented 😪");
    }

    private async void UpvoteComment(long id)
    {
        Console.WriteLine("Comment upvote not implemented 😪");
    }

    private async void DownvoteComment(long id)
    {
        Console.WriteLine("Comment downvote not implemented 😪");
    }
}
